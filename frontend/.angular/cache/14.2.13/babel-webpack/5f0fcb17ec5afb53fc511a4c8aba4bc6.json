{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseUrl = 'http://localhost:8080/api/products';\n      this.categoryUrl = 'http://localhost:8080/api/category';\n    }\n\n    getProduct(theProductId) {\n      const productUrl = `${this.baseUrl}/${theProductId}`;\n      return this.httpClient.get(productUrl);\n    }\n\n    getRandomProductList() {\n      const randomProductsUrl = `${this.baseUrl}`;\n      return this.httpClient.get(randomProductsUrl).pipe(map(response => response._embedded.products));\n    } // Function to get a list of products by category\n\n\n    getProductListByCategory(categoryName, thePage, thePageSize) {\n      const categoryProductsUrl = `${this.categoryUrl}/${categoryName}` + `?page=${thePage}&size=${thePageSize}`;\n      return this.httpClient.get(categoryProductsUrl);\n    }\n\n    getProductListPaginate(thePage, thePageSize, theCategoryId) {\n      const searchUrl = `${this.baseUrl}/search/${theCategoryId}` + `&page=${thePage}&size=${thePageSize}`;\n      return this.httpClient.get(searchUrl);\n    }\n\n    getProductList(theCategoryId) {\n      const searchUrl = `${this.baseUrl}/products`;\n      return this.httpClient.get(searchUrl).pipe( // Adjust the map operation according to the actual response structure\n      map(response => response._embedded.products) // Assuming the backend returns the products in a '_embedded.products' field\n      );\n    }\n\n    searchProducts(theKeyword) {\n      const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\n      return this.httpClient.get(searchUrl).pipe( // Adjust the map operation according to the actual response structure\n      map(response => response.content) // Assuming the backend returns the products in a 'content' field\n      );\n    } // Modify this method as well\n\n\n    searchProductsPaginate(thePage, thePageSize, theKeyword) {\n      const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}` + `&page=${thePage}&size=${thePageSize}`;\n      return this.httpClient.get(searchUrl).pipe( // Adjust the map operation according to the actual response structure\n      map(response => {\n        // Map the response to the expected GetResponseProducts structure\n        return {\n          _embedded: {\n            products: response.content // Again, assuming 'content' field\n\n          },\n          page: response.page // Assuming the backend returns pagination info in a 'page' field\n\n        };\n      }));\n    }\n\n    getProductCategories() {\n      // The response is a direct list so we don't need to map to an _embedded object\n      return this.httpClient.get(this.categoryUrl);\n    }\n\n  }\n\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}