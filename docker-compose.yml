version: '3.8'

services:

  # Define the backend service
  backend:
    container_name: backend
    build: ./backend
    depends_on:
      - database
    environment:
      - POSTGRES_URI=postgresql://mbsuperadmin:NeClownLast44*404*#Hahaha24-LS@database:5432/dh2p_database
    networks:
      - net1

  # Define the frontend service
  frontend:
    container_name: frontend
    build: ./frontend
    ports:
      - "4200:80" # Map port 80 in the container to port 4200 on the host
    networks:
      - net1

  # Define the Postgre db service
  database:
    container_name: postgres
    build: ./database
    environment:
      POSTGRES_USER: mbsuperadmin
      POSTGRES_PASSWORD: NeClownLast44*404*#Hahaha24-LS
      POSTGRES_DB: dh2p_database
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/10-init-postgres.sql
      - ./scripts/insert-data.sql:/docker-entrypoint-initdb.d/20-insert-data.sql
    networks:
      - net1
      - net2

  # Define the backup service
  backup:
    container_name: backup
    build: ./backup
    volumes:
      - backup_data:/backup
    environment:
      POSTGRES_USER: mbsuperadmin
      POSTGRES_PASSWORD: NeClownLast44*404*#Hahaha24-LS
      POSTGRES_DB: dh2p_database
      DATABASE_HOST: database
      PGPASSWORD: NeClownLast44*404*#Hahaha24-LS
      PGDATABASE: dh2p_database
    depends_on:
      - database
    networks:
      - net1
      - net2

  # Define the vhost1 service
  vhost1:
    container_name: vhost1
    build: ./vhost1
    depends_on:
      - backend
      - frontend
    networks:
      - net1
  
  # Define the vhost2 service
  vhost2:
    container_name: vhost2
    build: ./vhost2
    networks:
      - net2

  # Define the Caddy reverse proxy
  proxy:
    container_name: proxy
    build: ./proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./proxy/Caddyfile:/etc/caddy/Caddyfile:ro
    depends_on:
      - vhost1
      - vhost2
    networks:
      - net1
      - net2
      - net3

  # Define the Ansible automation service
  ansible-automation:
    container_name: ansible-automation
    build:
      context: ./ansible-automation
      dockerfile: Dockerfile
    command: sleep infinity
    volumes:
      - ./ansible-automation:/opt
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - vhost1
      - vhost2
      - database
      - proxy
    networks:
      - net1
      - net2
      - net3

volumes:
  db_data:
  backup_data:

networks:
  net1:
  net2:
  net3:
